{"version":3,"sources":["initial-data.js","Task.js","Column.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragDisabled","Task","this","task","draggableId","index","provided","draggableProps","dragHandleProps","ref","innerRef","Component","Title","h3","TaskList","Column","column","droppableId","droppableProps","map","placeholder","App","state","onDragEnd","result","destination","source","newTaskIds","Array","from","splice","newColumn","newState","setState","columnId","taskId","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA2BeA,EA3BK,CAClBC,MAAO,CACL,SAAU,CAAEC,GAAI,SAAUC,QAAS,wBACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,SACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,SACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,QAErCC,QAAS,CACP,WAAY,CACVF,GAAI,WACJG,MAAO,QACPC,QAAS,CAAC,SAAU,SAAU,SAAU,YAa5CC,YAAa,CAAC,a,gOCpBhB,IAAMC,EAAYC,IAAOC,IAAV,KAMH,SAAAC,GAAK,OAAKA,EAAMC,eAAiB,cAAgB,UAGxCC,E,uKACT,IAAD,OACDD,EAAwC,WAAvBE,KAAKH,MAAMI,KAAKb,GACvC,OACE,cAAC,IAAD,CAAWc,YAAaF,KAAKH,MAAMI,KAAKb,GAAIe,MAAOH,KAAKH,MAAMM,MAE9DL,eAAgBA,EAFhB,SAGG,SAACM,GAAD,OACC,cAACV,EAAD,uCAAeU,EAASC,gBAAoBD,EAASE,iBAArD,IAAsEC,IAAKH,EAASI,SAEpFV,eAAgBA,EAFhB,SAGG,EAAKD,MAAMI,KAAKZ,kB,GAXKoB,a,8TCRlC,IAAMf,EAAYC,IAAOC,IAAV,KAKTc,EAAQf,IAAOgB,GAAV,KAGLC,EAAWjB,IAAOC,IAAV,KAIOiB,E,uKACT,IAAD,OACP,OACE,eAAC,EAAD,WACE,cAACH,EAAD,UAAQV,KAAKH,MAAMiB,OAAOvB,QAC1B,cAAC,IAAD,CAAWwB,YAAaf,KAAKH,MAAMiB,OAAO1B,GAA1C,SACG,SAACgB,GAAD,OACC,eAACQ,EAAD,yBAAUL,IAAKH,EAASI,UAAcJ,EAASY,gBAA/C,cACG,EAAKnB,MAAMV,MAAM8B,KAAI,SAAChB,EAAKE,GAAN,OACpB,cAAC,EAAD,CAAoBF,KAAMA,EAAME,MAAOA,GAA5BF,EAAKb,OAEjBgB,EAASc,0B,GAXYT,aCV9BU,E,4MACJC,MAAQlC,E,EAERmC,UAAY,SAAAC,GAAU,IACZC,EAAoCD,EAApCC,YAAaC,EAAuBF,EAAvBE,OAAQtB,EAAeoB,EAAfpB,YAE7B,GAAIqB,IAIAA,EAAYR,cAAgBS,EAAOT,aAAeQ,EAAYpB,QAAUqB,EAAOrB,OAAnF,CAGA,IAAMW,EAAS,EAAKM,MAAM9B,QAAQkC,EAAOT,aACnCU,EAAaC,MAAMC,KAAKb,EAAOtB,SACrCiC,EAAWG,OAAOJ,EAAOrB,MAAO,GAChCsB,EAAWG,OAAOL,EAAYpB,MAAO,EAAGD,GACxC,IAAM2B,EAAS,2BACVf,GADU,IAEbtB,QAASiC,IAGLK,EAAQ,2BACT,EAAKV,OADI,IAEZ9B,QAAQ,2BACH,EAAK8B,MAAM9B,SADT,kBAEJuC,EAAUzC,GAAMyC,MAGrB,EAAKE,SAASD,K,uDAGN,IAAD,OACP,OACE,cAAC,IAAD,CAAiBT,UAAWrB,KAAKqB,UAAjC,SACGrB,KAAKoB,MAAM3B,YAAYwB,KAAI,SAACe,GAC3B,IAAMlB,EAAS,EAAKM,MAAM9B,QAAQ0C,GAC5B7C,EAAQ2B,EAAOtB,QAAQyB,KAC3B,SAACgB,GAAD,OAAY,EAAKb,MAAMjC,MAAM8C,MAG/B,OAAO,cAAC,EAAD,CAAwBnB,OAAQA,EAAQ3B,MAAOA,GAAlC2B,EAAO1B,a,GAzCnB8C,IAAMzB,WAgDxB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6dd8f7c5.chunk.js","sourcesContent":["const initialData = {\r\n  tasks: {\r\n    \"task-1\": { id: \"task-1\", content: \"Take out the garbage\" },\r\n    \"task-2\": { id: \"task-2\", content: \"Study\" },\r\n    \"task-3\": { id: \"task-3\", content: \"sleep\" },\r\n    \"task-4\": { id: \"task-4\", content: \"eat\" },\r\n  },\r\n  columns: {\r\n    \"column-1\": {\r\n      id: \"column-1\",\r\n      title: \"To do\",\r\n      taskIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\"],\r\n    },\r\n    // \"column-2\": {\r\n    //   id: \"column-2\",\r\n    //   title: \"In progress\",\r\n    //   taskIds: [],\r\n    // },\r\n    // \"column-3\": {\r\n    //   id: \"column-3\",\r\n    //   title: \"Done\",\r\n    //   taskIds: [],\r\n    // },\r\n  },\r\n  columnOrder: [\"column-1\",],\r\n};\r\n\r\nexport default initialData;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: #fff;\r\n  cursor: ${props => (props.isDragDisabled ? 'not-allowed' : 'grab')}\r\n`;\r\n\r\nexport default class Task extends Component {\r\n  render() {\r\n    const isDragDisabled = this.props.task.id === 'task-1';\r\n    return (\r\n      <Draggable draggableId={this.props.task.id} index={this.props.index} \r\n      // isDragDisabled here disables dragging\r\n      isDragDisabled={isDragDisabled}>\r\n        {(provided) => (\r\n          <Container {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} \r\n          // isDragDisabled here added to provided styling\r\n          isDragDisabled={isDragDisabled}>\r\n            {this.props.task.content}\r\n          </Container>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport Task from \"./Task\";\r\n\r\nconst Container = styled.div`\r\n  margin: 8px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n`;\r\nconst Title = styled.h3`\r\n  padding: 8px;\r\n`;\r\nconst TaskList = styled.div`\r\n  padding: 8px;\r\n`;\r\n\r\nexport default class Column extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Title>{this.props.column.title}</Title>\r\n        <Droppable droppableId={this.props.column.id}>\r\n          {(provided) => (\r\n            <TaskList ref={provided.innerRef} {...provided.droppableProps}>\r\n              {this.props.tasks.map((task,index) => (\r\n                <Task key={task.id} task={task} index={index} />\r\n              ))}\r\n              {provided.placeholder}\r\n            </TaskList>\r\n          )}\r\n        </Droppable>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport initialData from \"./initial-data\";\nimport Column from \"./Column\";\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragEnd = result =>{\n    const { destination, source, draggableId} = result;\n\n    if(!destination){\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index){\n      return;\n    }\n    const column = this.state.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId)\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds,\n    }\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newColumn.id] : newColumn\n      }\n    }\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        {this.state.columnOrder.map((columnId) => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(\n            (taskId) => this.state.tasks[taskId]\n          );\n\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}